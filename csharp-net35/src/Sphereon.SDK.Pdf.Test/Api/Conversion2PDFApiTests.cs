/* 
 * PDF
 *
 * The PDF conversion API 'conversion2pdf' converts image, office and PDF files to (searcheable) PDF files.    The flow is generally as follows:  1. First create a job using the /conversion2pdf/jobs POST endpoint. You will get back a job response that contains a job with its associated settings.  2. Upload one or more images/files using the /conversion2pdf/jobs/{jobId}/streams/multipart POST endpoint. You can also add stream locations from the storage API . You will get back the update job response that contains a job with its associated settings. Currently you can only merge spreadsheets with spreadsheet, documents with documents and images/pdfs with images/pdfs  3. Start the job from a PUT request to the /conversion2pdf/jobs/{jobid} endpoint, with the Job and Settings JSON as request body. The conversion to PDF will now start. The OCR setting is only applicable to images, since other files will always be searchable.  4. Check the job status from the /conversion2pdf/jobs/{jobid} GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  5. Retrieve the PDF file using the /conversion2pdf/jobs/{jobid}/streams/result GET endpoint. This will return the PDF file only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      Interactive testing: A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 1.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Threading;
using NUnit.Framework;
using Sphereon.SDK.Pdf.Client;
using Sphereon.SDK.Pdf.Api;
using Sphereon.SDK.Pdf.Model;

namespace Sphereon.SDK.Pdf.Test {
    /// <summary>
    ///  Class for testing Conversion2PDFApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class Conversion2PDFApiTests {
        private static readonly string TestImage = TestContext.CurrentContext.TestDirectory + @"..\TestData\EH.tif";
        private static readonly string ResultFile = TestContext.CurrentContext.TestDirectory + @"..\EH.pdf";

        private Conversion2PDFApi instance;
        private ConversionJob _job;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init() {
            Configuration.Default.AccessToken = "6534f740-a99a-3bde-9046-287de103baf9";
            instance = new Conversion2PDFApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup() { }

        /// <summary>
        /// Test an instance of Conversion2PDFApi
        /// </summary>
        [Test]
        public void InstanceTest() {
            // TODO uncomment below to test 'IsInstanceOfType' Conversion2PDFApi
            //Assert.IsInstanceOfType(typeof(Conversion2PDFApi), instance, "instance is a Conversion2PDFApi");
        }

        /// <summary>
        /// Test CreateJob
        /// </summary>
        [Test]
        public void TestController() {
            CreateJob();
            AddInputFile();
            SubmitJob();
            GetStream();
        }

        public void CreateJob() {
            var settings = new ConversionSettings(
                Engine: ConversionSettings.EngineEnum.PREMIUM,
                OcrMode: ConversionSettings.OcrModeEnum.AUTO,
                QualityFactor: 255,
                JobLifecycle: new Lifecycle(
                    Action: Lifecycle.ActionEnum.DELETE,
                    Type: Lifecycle.TypeEnum.RETRIEVAL
                ),
                Result: new ResultSettings(
                    FileFormat: ResultSettings.FileFormatEnum.PDF,
                    Compression: new Compression {
                        Type = Compression.TypeEnum.NONE,
                    },
                    Lifecycle: new Lifecycle {
                        Type = Lifecycle.TypeEnum.RETRIEVAL,
                        Action = Lifecycle.ActionEnum.DELETE
                    }
                ),
                Version: ConversionSettings.VersionEnum.A1b
            );
            var jobResponse = instance.CreateJob(settings);
            Assert.IsInstanceOf<ConversionJobResponse>(jobResponse, "response is ConversionJobResponse");
            if (jobResponse.Status != ConversionJobResponse.StatusEnum.INIT) {
                throw new Exception($"Creation of new conversion job on the pdf-conversion-ms failed: {jobResponse.StatusMessage}");
            }
            _job = jobResponse.Job;
        }

        /// <summary>
        /// Test AddInputFile
        /// </summary>
        public void AddInputFile() {
            using (var fileStream = File.OpenRead(TestImage)) {
                var uploadResponse = instance.AddInputFile(_job.JobId, fileStream);
                if (uploadResponse.Status != ConversionJobResponse.StatusEnum.INPUTSUPLOADED) {
                    throw new Exception($"Upload of file {TestImage} to pdf-conversion-ms failed: {uploadResponse.StatusMessage}");
                }
            }

            //Assert.IsInstanceOf<ConversionJobResponse> (response, "response is ConversionJobResponse");
        }


        public void SubmitJob() {
            var submitResponse = instance.SubmitJob(_job.JobId, _job);
            if (submitResponse.Status != ConversionJobResponse.StatusEnum.PROCESSING) {
                throw new Exception($"Submission of job {_job.JobId} to pdf-conversion-ms failed: {submitResponse.StatusMessage}");
            }
            Assert.IsInstanceOf<ConversionJobResponse>(submitResponse, "response is ConversionJobResponse");
        }


        /// <summary>
        /// Test GetStream
        /// </summary>
        public void GetStream() {
            WaitForJob();
            using (var stream = new FileInfo(ResultFile).OpenWrite()) {
                var data = instance.GetStream(_job.JobId);
                Assert.IsInstanceOf<byte[]>(data, "response is byte[]");
                stream.Write(data, 0, data.Length);
            }
        }


        private void WaitForJob() {
            ConversionJobResponse response = null;
            int count = 0;
            do {
                Thread.Sleep(500);
                count++;
                response = instance.GetJob(_job.JobId);
            } while (count < 100
                     && response.Status != ConversionJobResponse.StatusEnum.DONE
                     && response.Status != ConversionJobResponse.StatusEnum.ERROR);
        }
    }
}