/* 
 * PDF 
 *
 * <b>The PDF conversion API 'conversion2pdf' converts image, office and PDF files to (searcheable) PDF files.</b>    The flow is generally as follows:  1. First upload an image/file using the /conversion2pdf POST endpoint. You will get back a job response that contains a job with its associated settings.  2. Upload any additional images/files using the /conversion2pdf/{jobId} POST endpoint when you want to merge additional image, office or PDF files. You will get back the update job response that contains a job with its associated settings. Currently you can only merge spreadsheets with spreadsheet, documents with documents and images/pdfs with images/pdfs  3. Start the job from a PUT request to the /conversion2pdf/{jobid} endpoint, with the Job and Settings JSON as request body. The conversion to PDF will now start. The OCR setting is only applicable to images, since other files will always be searchable.  4. Check the job status from the /conversion2pdf/{jobid} GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  5. Retrieve the PDF file using the /conversion2pdf/{jobid}/stream GET endpoint. This will return the PDF file only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Sphereon.SDK.Pdf.Client;
using Sphereon.SDK.Pdf.Model;

namespace Sphereon.SDK.Pdf.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConversionPDFApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a job manually
        /// </summary>
        /// <remarks>
        /// Delete the PDF job and all related files
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ConversionJobResponse</returns>
        ConversionJobResponse DeleteJob (string jobid);

        /// <summary>
        /// Delete a job manually
        /// </summary>
        /// <remarks>
        /// Delete the PDF job and all related files
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of ConversionJobResponse</returns>
        ApiResponse<ConversionJobResponse> DeleteJobWithHttpInfo (string jobid);
        /// <summary>
        /// Job definition and state
        /// </summary>
        /// <remarks>
        /// Get the PDF job definition and current state. Please not that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ConversionJobResponse</returns>
        ConversionJobResponse GetJob (string jobid);

        /// <summary>
        /// Job definition and state
        /// </summary>
        /// <remarks>
        /// Get the PDF job definition and current state. Please not that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of ConversionJobResponse</returns>
        ApiResponse<ConversionJobResponse> GetJobWithHttpInfo (string jobid);
        /// <summary>
        /// Get all jobs
        /// </summary>
        /// <remarks>
        /// Get all PDF job definitions and their current state.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>ConversionJobResponse</returns>
        ConversionJobResponse GetJobs (List<string> status = null);

        /// <summary>
        /// Get all jobs
        /// </summary>
        /// <remarks>
        /// Get all PDF job definitions and their current state.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>ApiResponse of ConversionJobResponse</returns>
        ApiResponse<ConversionJobResponse> GetJobsWithHttpInfo (List<string> status = null);
        /// <summary>
        /// Get the current result stream
        /// </summary>
        /// <remarks>
        /// Get the PDF as binary stream/file.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.&lt;br/&gt;This means we use a seperate path postfix with the value &#39;/stream&#39;.  This API only returns the PDF when the response status code is zero! In other cases nothing is returned or the Job JSON when it is still being executed
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>byte[]</returns>
        byte[] GetStream (string jobid);

        /// <summary>
        /// Get the current result stream
        /// </summary>
        /// <remarks>
        /// Get the PDF as binary stream/file.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.&lt;br/&gt;This means we use a seperate path postfix with the value &#39;/stream&#39;.  This API only returns the PDF when the response status code is zero! In other cases nothing is returned or the Job JSON when it is still being executed
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GetStreamWithHttpInfo (string jobid);
        /// <summary>
        /// Submit PDF job for processing
        /// </summary>
        /// <remarks>
        /// Convert the previously uploaded file(s) to PDF, using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the job Id in the path must match the jobId in the request
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="job">jobEntity</param>
        /// <returns>ConversionJobResponse</returns>
        ConversionJobResponse SubmitJob (string jobid, ConversionJob job);

        /// <summary>
        /// Submit PDF job for processing
        /// </summary>
        /// <remarks>
        /// Convert the previously uploaded file(s) to PDF, using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the job Id in the path must match the jobId in the request
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="job">jobEntity</param>
        /// <returns>ApiResponse of ConversionJobResponse</returns>
        ApiResponse<ConversionJobResponse> SubmitJobWithHttpInfo (string jobid, ConversionJob job);
        /// <summary>
        /// Upload an additional file
        /// </summary>
        /// <remarks>
        /// Upload an additional image, office or pdf for conversion to PDF. Conversion will not be started yet.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="stream">The additional binary image or PDF (file/inputstream) to convert to PDF</param>
        /// <param name="fileName">Optional input file name. (optional)</param>
        /// <returns>ConversionJobResponse</returns>
        ConversionJobResponse UploadAdditionalFile (string jobid, System.IO.Stream stream, string fileName = null);

        /// <summary>
        /// Upload an additional file
        /// </summary>
        /// <remarks>
        /// Upload an additional image, office or pdf for conversion to PDF. Conversion will not be started yet.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="stream">The additional binary image or PDF (file/inputstream) to convert to PDF</param>
        /// <param name="fileName">Optional input file name. (optional)</param>
        /// <returns>ApiResponse of ConversionJobResponse</returns>
        ApiResponse<ConversionJobResponse> UploadAdditionalFileWithHttpInfo (string jobid, System.IO.Stream stream, string fileName = null);
        /// <summary>
        /// Upload first file
        /// </summary>
        /// <remarks>
        /// Upload the first image, office or pdf file.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stream">The first image, office or PDF file to convert to PDF</param>
        /// <param name="fileName">Optional input file name. (optional)</param>
        /// <returns>ConversionJobResponse</returns>
        ConversionJobResponse UploadFile (System.IO.Stream stream, string fileName = null);

        /// <summary>
        /// Upload first file
        /// </summary>
        /// <remarks>
        /// Upload the first image, office or pdf file.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stream">The first image, office or PDF file to convert to PDF</param>
        /// <param name="fileName">Optional input file name. (optional)</param>
        /// <returns>ApiResponse of ConversionJobResponse</returns>
        ApiResponse<ConversionJobResponse> UploadFileWithHttpInfo (System.IO.Stream stream, string fileName = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConversionPDFApi : IConversionPDFApi
    {
        private Sphereon.SDK.Pdf.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConversionPDFApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConversionPDFApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Sphereon.SDK.Pdf.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConversionPDFApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConversionPDFApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Sphereon.SDK.Pdf.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sphereon.SDK.Pdf.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a job manually Delete the PDF job and all related files
        /// </summary>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ConversionJobResponse</returns>
        public ConversionJobResponse DeleteJob (string jobid)
        {
             ApiResponse<ConversionJobResponse> localVarResponse = DeleteJobWithHttpInfo(jobid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a job manually Delete the PDF job and all related files
        /// </summary>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of ConversionJobResponse</returns>
        public ApiResponse< ConversionJobResponse > DeleteJobWithHttpInfo (string jobid)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling ConversionPDFApi->DeleteJob");

            var localVarPath = "/pdf/1.0/conversion2pdf/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConversionJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConversionJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConversionJobResponse)));
            
        }

        /// <summary>
        /// Job definition and state Get the PDF job definition and current state. Please not that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ConversionJobResponse</returns>
        public ConversionJobResponse GetJob (string jobid)
        {
             ApiResponse<ConversionJobResponse> localVarResponse = GetJobWithHttpInfo(jobid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Job definition and state Get the PDF job definition and current state. Please not that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of ConversionJobResponse</returns>
        public ApiResponse< ConversionJobResponse > GetJobWithHttpInfo (string jobid)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling ConversionPDFApi->GetJob");

            var localVarPath = "/pdf/1.0/conversion2pdf/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConversionJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConversionJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConversionJobResponse)));
            
        }

        /// <summary>
        /// Get all jobs Get all PDF job definitions and their current state.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>ConversionJobResponse</returns>
        public ConversionJobResponse GetJobs (List<string> status = null)
        {
             ApiResponse<ConversionJobResponse> localVarResponse = GetJobsWithHttpInfo(status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all jobs Get all PDF job definitions and their current state.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>ApiResponse of ConversionJobResponse</returns>
        public ApiResponse< ConversionJobResponse > GetJobsWithHttpInfo (List<string> status = null)
        {

            var localVarPath = "/pdf/1.0/conversion2pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConversionJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConversionJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConversionJobResponse)));
            
        }

        /// <summary>
        /// Get the current result stream Get the PDF as binary stream/file.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.&lt;br/&gt;This means we use a seperate path postfix with the value &#39;/stream&#39;.  This API only returns the PDF when the response status code is zero! In other cases nothing is returned or the Job JSON when it is still being executed
        /// </summary>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>byte[]</returns>
        public byte[] GetStream (string jobid)
        {
             ApiResponse<byte[]> localVarResponse = GetStreamWithHttpInfo(jobid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current result stream Get the PDF as binary stream/file.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.&lt;br/&gt;This means we use a seperate path postfix with the value &#39;/stream&#39;.  This API only returns the PDF when the response status code is zero! In other cases nothing is returned or the Job JSON when it is still being executed
        /// </summary>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > GetStreamWithHttpInfo (string jobid)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling ConversionPDFApi->GetStream");

            var localVarPath = "/pdf/1.0/conversion2pdf/{jobid}/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
            
        }

        /// <summary>
        /// Submit PDF job for processing Convert the previously uploaded file(s) to PDF, using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the job Id in the path must match the jobId in the request
        /// </summary>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="job">jobEntity</param>
        /// <returns>ConversionJobResponse</returns>
        public ConversionJobResponse SubmitJob (string jobid, ConversionJob job)
        {
             ApiResponse<ConversionJobResponse> localVarResponse = SubmitJobWithHttpInfo(jobid, job);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submit PDF job for processing Convert the previously uploaded file(s) to PDF, using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the job Id in the path must match the jobId in the request
        /// </summary>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="job">jobEntity</param>
        /// <returns>ApiResponse of ConversionJobResponse</returns>
        public ApiResponse< ConversionJobResponse > SubmitJobWithHttpInfo (string jobid, ConversionJob job)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling ConversionPDFApi->SubmitJob");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling ConversionPDFApi->SubmitJob");

            var localVarPath = "/pdf/1.0/conversion2pdf/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter
            if (job != null && job.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(job); // http body (model) parameter
            }
            else
            {
                localVarPostBody = job; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConversionJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConversionJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConversionJobResponse)));
            
        }

        /// <summary>
        /// Upload an additional file Upload an additional image, office or pdf for conversion to PDF. Conversion will not be started yet.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="stream">The additional binary image or PDF (file/inputstream) to convert to PDF</param>
        /// <param name="fileName">Optional input file name. (optional)</param>
        /// <returns>ConversionJobResponse</returns>
        public ConversionJobResponse UploadAdditionalFile (string jobid, System.IO.Stream stream, string fileName = null)
        {
             ApiResponse<ConversionJobResponse> localVarResponse = UploadAdditionalFileWithHttpInfo(jobid, stream, fileName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload an additional file Upload an additional image, office or pdf for conversion to PDF. Conversion will not be started yet.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid">jobid</param>
        /// <param name="stream">The additional binary image or PDF (file/inputstream) to convert to PDF</param>
        /// <param name="fileName">Optional input file name. (optional)</param>
        /// <returns>ApiResponse of ConversionJobResponse</returns>
        public ApiResponse< ConversionJobResponse > UploadAdditionalFileWithHttpInfo (string jobid, System.IO.Stream stream, string fileName = null)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling ConversionPDFApi->UploadAdditionalFile");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling ConversionPDFApi->UploadAdditionalFile");

            var localVarPath = "/pdf/1.0/conversion2pdf/{jobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter
            if (fileName != null) localVarQueryParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // query parameter
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadAdditionalFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConversionJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConversionJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConversionJobResponse)));
            
        }

        /// <summary>
        /// Upload first file Upload the first image, office or pdf file.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stream">The first image, office or PDF file to convert to PDF</param>
        /// <param name="fileName">Optional input file name. (optional)</param>
        /// <returns>ConversionJobResponse</returns>
        public ConversionJobResponse UploadFile (System.IO.Stream stream, string fileName = null)
        {
             ApiResponse<ConversionJobResponse> localVarResponse = UploadFileWithHttpInfo(stream, fileName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload first file Upload the first image, office or pdf file.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Pdf.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stream">The first image, office or PDF file to convert to PDF</param>
        /// <param name="fileName">Optional input file name. (optional)</param>
        /// <returns>ApiResponse of ConversionJobResponse</returns>
        public ApiResponse< ConversionJobResponse > UploadFileWithHttpInfo (System.IO.Stream stream, string fileName = null)
        {
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling ConversionPDFApi->UploadFile");

            var localVarPath = "/pdf/1.0/conversion2pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fileName != null) localVarQueryParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // query parameter
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConversionJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConversionJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConversionJobResponse)));
            
        }

    }
}
