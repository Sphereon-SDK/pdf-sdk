/* 
 * PDF
 *
 * The PDF conversion API 'conversion2pdf' converts image, office and PDF files to (searcheable) PDF files.    The flow is generally as follows:  1. First create a job using the /conversion2pdf/jobs POST endpoint. You will get back a job response that contains a job with its associated settings.  2. Upload one or more images/files using the /conversion2pdf/jobs/{jobId}/streams/multipart POST endpoint. You can also add stream locations from the storage API . You will get back the update job response that contains a job with its associated settings. Currently you can only merge spreadsheets with spreadsheet, documents with documents and images/pdfs with images/pdfs  3. Start the job from a PUT request to the /conversion2pdf/jobs/{jobid} endpoint, with the Job and Settings JSON as request body. The conversion to PDF will now start. The OCR setting is only applicable to images, since other files will always be searchable.  4. Check the job status from the /conversion2pdf/jobs/{jobid} GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  5. Retrieve the PDF file using the /conversion2pdf/jobs/{jobid}/streams/result GET endpoint. This will return the PDF file only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      Interactive testing: A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 1.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;
using Newtonsoft.Json.Linq;
using RestSharp;
using NUnit.Framework;
using Sphereon.SDK.Pdf.Client;
using Sphereon.SDK.Pdf.Api;
using Sphereon.SDK.Pdf.Model;

namespace Sphereon.SDK.Pdf.Test
{
    /// <summary>
    ///  Class for testing Conversion2PDFApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class Conversion2PDFApiTests
    {
        private const string AccesstokenKey = "sphereon.tests.accesstoken";

        private static string FixedAccessToken = Environment.GetEnvironmentVariable(AccesstokenKey);


        private Conversion2PDFApi instance;
        private ConversionJob _conversionJob;

        private static bool done = false;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new Conversion2PDFApi();
            if (String.IsNullOrEmpty(FixedAccessToken))
            {
                throw new Exception("Please provide an environment variable named " + AccesstokenKey);
            }
            instance.Configuration.AccessToken = FixedAccessToken;
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }


        /// <summary>
        /// Test CreateJob
        /// </summary>
        [Test, Order(10)]
        public void CreateJobTest()
        {
            ResultSettings resultSettings = new ResultSettings(new Lifecycle(), null,
                new Compression(1, Compression.TypeEnum.ADVANCED), ResultSettings.FileFormatEnum.PDF);

            ConversionSettings settings =
                new ConversionSettings
                {
                    ContainerConversion = ConversionSettings.ContainerConversionEnum.ALL,
                    Engine = ConversionSettings.EngineEnum.ADVANCED,
                    Result = resultSettings,
                    Version = ConversionSettings.VersionEnum.A1b,
                    Input = new InputSettings

                    {
                        Lifecycle = new Lifecycle(),
                    },
                };


            var jobResponse = instance.CreateJob(settings);
            Assert.IsInstanceOf<ConversionJobResponse>(jobResponse, "response is ConversionJobResponse");
            Assert.IsNotNull(jobResponse.JobId);
            Assert.IsNotNull(jobResponse.Job);
            _conversionJob = jobResponse.Job;

            Console.WriteLine(_conversionJob);
        }


        /// <summary>
        /// Test AddInputFile
        /// </summary>
        [Test, Order(10)]
        public void AddInputFileTest()
        {
            System.IO.Stream stream = new MemoryStream(Encoding.ASCII.GetBytes("TEST"));
            string fileName = "test.txt";
            var response = instance.AddInputFile(_conversionJob.JobId, stream, fileName);
            Assert.IsInstanceOf<ConversionJobResponse>(response, "response is ConversionJobResponse");
            Assert.AreEqual(_conversionJob.JobId, response.JobId);


            _conversionJob = response.Job;
        }


        /// <summary>
        /// Test GetJobs
        /// </summary>
        [Test, Order(20)]
        public void GetJobsTest()
        {
            List<string> status = new List<string>() {"INPUTS_UPLOADED"};
            var response = instance.GetJobs(status);
            Assert.IsInstanceOf<List<ConversionJobResponse>>(response, "response is ConversionJobResponse");
            Assert.IsNotEmpty(response);
        }

        /// <summary>
        /// Test SubmitJob
        /// </summary>
        [Test, Order(40)]
        public void SubmitJobTest()
        {
            var response = instance.SubmitJob(_conversionJob.JobId, _conversionJob);
            Assert.IsInstanceOf<ConversionJobResponse>(response, "response is ConversionJobResponse");
            Assert.AreEqual(ConversionJobResponse.StatusEnum.PROCESSING, response.Status);
        }

        /// <summary>
        /// Test GetJob
        /// </summary>
        [Test, Order(60)]
        public void GetJobTest()
        {
            String jobId = _conversionJob.JobId;
            var response = instance.GetJob(jobId);
            int nr = 0;
            while (ConversionJobResponse.StatusEnum.PROCESSING == response.Status && nr++ < 60)
            {
                response = instance.GetJob(jobId);
                Thread.Sleep(500);
            }
            Assert.AreEqual(ConversionJobResponse.StatusEnum.DONE, response.Status);
            done = true;
        }


        /// <summary>
        /// Test GetStream
        /// </summary>
        [Test, Order(80)]
        public void GetStreamTest()
        {
            var response = instance.GetStream(_conversionJob.JobId);
            Assert.IsInstanceOf<byte[]>(response, "response is byte[]");
            String asText = System.Text.Encoding.UTF8.GetString(response);
            Console.Write(asText);
            Assert.True(asText.Contains("PDF-1.4"));
            Assert.True(asText.Contains("pdfa"));
            Assert.True(asText.Contains("[(TEST)]"));
        }

        /// <summary>
        /// Test DeleteJob
        /// </summary>
        [Test, Order(999)]
        public void DeleteJobTest()
        {
            if (_conversionJob != null && !done)
            {
                var response = instance.DeleteJob(_conversionJob.JobId);
                Assert.IsInstanceOf<ConversionJobResponse>(response, "response is ConversionJobResponse");
            }
        }


        /// <summary>
        /// Test AddInputStreamLocations
        /// </summary>
        [Test, Ignore("Needs the Storage SDK")]
        public void AddInputStreamLocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobid = null;
            //List<StreamLocation> inputStreamLocations = null;
            //var response = instance.AddInputStreamLocations(jobid, inputStreamLocations);
            //Assert.IsInstanceOf<ConversionJobResponse> (response, "response is ConversionJobResponse");
        }
    }
}