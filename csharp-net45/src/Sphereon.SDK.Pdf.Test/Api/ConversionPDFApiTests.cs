/* 
 * Converstion 2 PDF
 *
 * <b>The PDF conversion API 'conversion2pdf' converts files/images to (searcheable) PDF files.</b>    The flow is generally as follows:  1. First upload an image/file using the /conversion2pdf POST endpoint. You will get back a job response that contains a job with its associated settings.  2. Upload any additional images/files using the /conversion2pdf/{jobId} POST endpoint when you want to merge additional images or PDFs. You will get back the update job response that contains a job with its associated settings.  3. Start the job from a PUT request to the /conversion2pdf/{jobid} endpoint, with the Job and Settings JSON as request body. The conversion to PDF will now start  4. Check the job status from the /conversion2pdf/{jobid} GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  5. Retrieve the PDF file using the /conversion2pdf/{jobid}/stream GET endpoint. This will return the PDF file only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.3.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Sphereon.SDK.Pdf.Client;
using Sphereon.SDK.Pdf.Api;
using Sphereon.SDK.Pdf.Model;

namespace Sphereon.SDK.Pdf.Test
{
    /// <summary>
    ///  Class for testing ConversionPDFApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ConversionPDFApiTests
    {
        private ConversionPDFApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ConversionPDFApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ConversionPDFApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ConversionPDFApi
            //Assert.IsInstanceOfType(typeof(ConversionPDFApi), instance, "instance is a ConversionPDFApi");
        }

        
        /// <summary>
        /// Test DeleteJob
        /// </summary>
        [Test]
        public void DeleteJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobid = null;
            //var response = instance.DeleteJob(jobid);
            //Assert.IsInstanceOf<PDFJobResponse> (response, "response is PDFJobResponse");
        }
        
        /// <summary>
        /// Test GetJob
        /// </summary>
        [Test]
        public void GetJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobid = null;
            //var response = instance.GetJob(jobid);
            //Assert.IsInstanceOf<PDFJobResponse> (response, "response is PDFJobResponse");
        }
        
        /// <summary>
        /// Test GetJobs
        /// </summary>
        [Test]
        public void GetJobsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> status = null;
            //var response = instance.GetJobs(status);
            //Assert.IsInstanceOf<PDFJobResponse> (response, "response is PDFJobResponse");
        }
        
        /// <summary>
        /// Test GetStream
        /// </summary>
        [Test]
        public void GetStreamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobid = null;
            //var response = instance.GetStream(jobid);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test SubmitJob
        /// </summary>
        [Test]
        public void SubmitJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobid = null;
            //PDFJob job = null;
            //var response = instance.SubmitJob(jobid, job);
            //Assert.IsInstanceOf<PDFJobResponse> (response, "response is PDFJobResponse");
        }
        
        /// <summary>
        /// Test UploadAdditionalFile
        /// </summary>
        [Test]
        public void UploadAdditionalFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobid = null;
            //System.IO.Stream stream = null;
            //var response = instance.UploadAdditionalFile(jobid, stream);
            //Assert.IsInstanceOf<PDFJobResponse> (response, "response is PDFJobResponse");
        }
        
        /// <summary>
        /// Test UploadFile
        /// </summary>
        [Test]
        public void UploadFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream stream = null;
            //var response = instance.UploadFile(stream);
            //Assert.IsInstanceOf<PDFJobResponse> (response, "response is PDFJobResponse");
        }
        
    }

}
