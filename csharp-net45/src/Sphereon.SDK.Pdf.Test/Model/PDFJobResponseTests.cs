/* 
 * Converstion 2 PDF
 *
 * <b>The PDF conversion API 'conversion2pdf' converts image, office and PDF files to (searcheable) PDF files.</b>    The flow is generally as follows:  1. First upload an image/file using the /conversion2pdf POST endpoint. You will get back a job response that contains a job with its associated settings.  2. Upload any additional images/files using the /conversion2pdf/{jobId} POST endpoint when you want to merge additional image, office or PDF files. You will get back the update job response that contains a job with its associated settings. Currently you can only merge spreadsheets with spreadsheet, documents with documents and images/pdfs with images/pdfs  3. Start the job from a PUT request to the /conversion2pdf/{jobid} endpoint, with the Job and Settings JSON as request body. The conversion to PDF will now start. The OCR setting is only applicable to images, since other files will always be searchable.  4. Check the job status from the /conversion2pdf/{jobid} GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  5. Retrieve the PDF file using the /conversion2pdf/{jobid}/stream GET endpoint. This will return the PDF file only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.3.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Sphereon.SDK.Pdf.Api;
using Sphereon.SDK.Pdf.Model;
using Sphereon.SDK.Pdf.Client;
using System.Reflection;

namespace Sphereon.SDK.Pdf.Test
{
    /// <summary>
    ///  Class for testing PDFJobResponse
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class PDFJobResponseTests
    {
        // TODO uncomment below to declare an instance variable for PDFJobResponse
        //private PDFJobResponse instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of PDFJobResponse
            //instance = new PDFJobResponse();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PDFJobResponse
        /// </summary>
        [Test]
        public void PDFJobResponseInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" PDFJobResponse
            //Assert.IsInstanceOfType<PDFJobResponse> (instance, "variable 'instance' is a PDFJobResponse");
        }

        /// <summary>
        /// Test the property 'CompletionTime'
        /// </summary>
        [Test]
        public void CompletionTimeTest()
        {
            // TODO unit test for the property 'CompletionTime'
        }
        /// <summary>
        /// Test the property 'JobId'
        /// </summary>
        [Test]
        public void JobIdTest()
        {
            // TODO unit test for the property 'JobId'
        }
        /// <summary>
        /// Test the property 'CreationTime'
        /// </summary>
        [Test]
        public void CreationTimeTest()
        {
            // TODO unit test for the property 'CreationTime'
        }
        /// <summary>
        /// Test the property 'Inputs'
        /// </summary>
        [Test]
        public void InputsTest()
        {
            // TODO unit test for the property 'Inputs'
        }
        /// <summary>
        /// Test the property 'ConversionTasks'
        /// </summary>
        [Test]
        public void ConversionTasksTest()
        {
            // TODO unit test for the property 'ConversionTasks'
        }
        /// <summary>
        /// Test the property 'UpdateTime'
        /// </summary>
        [Test]
        public void UpdateTimeTest()
        {
            // TODO unit test for the property 'UpdateTime'
        }
        /// <summary>
        /// Test the property 'Job'
        /// </summary>
        [Test]
        public void JobTest()
        {
            // TODO unit test for the property 'Job'
        }
        /// <summary>
        /// Test the property 'StatusMessage'
        /// </summary>
        [Test]
        public void StatusMessageTest()
        {
            // TODO unit test for the property 'StatusMessage'
        }
        /// <summary>
        /// Test the property 'QueueTime'
        /// </summary>
        [Test]
        public void QueueTimeTest()
        {
            // TODO unit test for the property 'QueueTime'
        }
        /// <summary>
        /// Test the property 'Status'
        /// </summary>
        [Test]
        public void StatusTest()
        {
            // TODO unit test for the property 'Status'
        }

    }

}
