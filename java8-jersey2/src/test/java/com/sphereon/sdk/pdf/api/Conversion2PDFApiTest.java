/*
 * PDF
 * The PDF conversion API 'conversion2pdf' converts image, office and PDF files to (searcheable) PDF files.    The flow is generally as follows:  1. First create a job using the /conversion2pdf/jobs POST endpoint. You will get back a job response that contains a job with its associated settings.  2. Upload one or more images/files using the /conversion2pdf/jobs/{jobId}/streams/multipart POST endpoint. You can also add stream locations from the storage API . You will get back the update job response that contains a job with its associated settings. Currently you can only merge spreadsheets with spreadsheet, documents with documents and images/pdfs with images/pdfs  3. Start the job from a PUT request to the /conversion2pdf/jobs/{jobid} endpoint, with the Job and Settings JSON as request body. The conversion to PDF will now start. The OCR setting is only applicable to images, since other files will always be searchable.  4. Check the job status from the /conversion2pdf/jobs/{jobid} GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  5. Retrieve the PDF file using the /conversion2pdf/jobs/{jobid}/streams/result GET endpoint. This will return the PDF file only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      Interactive testing: A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 1.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.pdf.api;

import com.sphereon.sdk.pdf.handler.ApiException;
import com.sphereon.sdk.pdf.model.ConversionJobResponse;
import com.sphereon.sdk.pdf.model.ConversionSettings;
import com.sphereon.sdk.pdf.model.ErrorResponse;
import java.io.File;
import com.sphereon.sdk.pdf.model.StreamLocation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Conversion2PDFApi
 */
@Ignore
public class Conversion2PDFApiTest {

    private final Conversion2PDFApi api = new Conversion2PDFApi();

    
    /**
     * Upload a file
     *
     * Upload an image, office or pdf for conversion to PDF. Please note that you can upload multiple files. Conversion will not be started yet.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInputFileTest() throws ApiException {
        String jobid = null;
        File stream = null;
        String fileName = null;
        ConversionJobResponse response = api.addInputFile(jobid, stream, fileName);

        // TODO: test validations
    }
    
    /**
     * Add Input Stream Location(s)
     *
     * Add image, office or pdf input stream location(s) from the storage API for conversion to PDF. Please note that you can upload multiple files. Conversion will not be started yet.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInputStreamLocationsTest() throws ApiException {
        String jobid = null;
        List<StreamLocation> inputStreamLocations = null;
        ConversionJobResponse response = api.addInputStreamLocations(jobid, inputStreamLocations);

        // TODO: test validations
    }
    
    /**
     * Create a PDF conversion job
     *
     * Create a PDF conversion job using optional settings supplied, otherwise defaults will be used
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createJobTest() throws ApiException {
        ConversionSettings settings = null;
        ConversionJobResponse response = api.createJob(settings);

        // TODO: test validations
    }
    
    /**
     * Delete a job manually
     *
     * Delete the PDF job and all related files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJobTest() throws ApiException {
        String jobid = null;
        ConversionJobResponse response = api.deleteJob(jobid);

        // TODO: test validations
    }
    
    /**
     * Job definition and state
     *
     * Get the PDF job definition and current state. Please note that you can differentiate based on http response status.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobTest() throws ApiException {
        String jobid = null;
        ConversionJobResponse response = api.getJob(jobid);

        // TODO: test validations
    }
    
    /**
     * Get all jobs
     *
     * Get all PDF job definitions and their current state.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobsTest() throws ApiException {
        List<String> status = null;
        ConversionJobResponse response = api.getJobs(status);

        // TODO: test validations
    }
    
    /**
     * Get the current result stream
     *
     * Get the PDF as binary stream/file.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.&lt;br/&gt;This means we use a seperate path postfix with the value &#39;/stream&#39;.  This API only returns the PDF when the response status.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStreamTest() throws ApiException {
        String jobid = null;
        byte[] response = api.getStream(jobid);

        // TODO: test validations
    }
    
    /**
     * Submit PDF job for processing
     *
     * Start PDF conversion. Convert the previously uploaded file(s) to PDF. The settings supplied with the job in the request body are used for the conversion. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the job Id in the path must match the jobId in the request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitJobTest() throws ApiException {
        String jobid = null;
        String bodySettingsResultFileFormat = null;
        String bodyJobId = null;
        List<String> bodySettingsInputLifecycleApplicableJobStatusses = null;
        String bodySettingsInputLifecycleAction = null;
        String bodySettingsInputLifecycleType = null;
        String bodySettingsInputStorageLocationId = null;
        String bodySettingsInputStorageLocationContainerId = null;
        String bodySettingsInputStorageLocationFolderPath = null;
        List<String> bodySettingsResultLifecycleApplicableJobStatusses = null;
        String bodySettingsResultLifecycleAction = null;
        String bodySettingsResultLifecycleType = null;
        String bodySettingsResultStorageLocationId = null;
        String bodySettingsResultStorageLocationContainerId = null;
        String bodySettingsResultStorageLocationFolderPath = null;
        Integer bodySettingsResultCompressionLevel = null;
        String bodySettingsResultCompressionType = null;
        List<String> bodySettingsJobLifecycleApplicableJobStatusses = null;
        String bodySettingsJobLifecycleAction = null;
        String bodySettingsJobLifecycleType = null;
        String bodySettingsOcrMode = null;
        Integer bodySettingsQualityFactor = null;
        String bodySettingsContainerConversion = null;
        String bodySettingsEngine = null;
        String bodySettingsVersion = null;
        String bodySettingsOwner = null;
        ConversionJobResponse response = api.submitJob(jobid, bodySettingsResultFileFormat, bodyJobId, bodySettingsInputLifecycleApplicableJobStatusses, bodySettingsInputLifecycleAction, bodySettingsInputLifecycleType, bodySettingsInputStorageLocationId, bodySettingsInputStorageLocationContainerId, bodySettingsInputStorageLocationFolderPath, bodySettingsResultLifecycleApplicableJobStatusses, bodySettingsResultLifecycleAction, bodySettingsResultLifecycleType, bodySettingsResultStorageLocationId, bodySettingsResultStorageLocationContainerId, bodySettingsResultStorageLocationFolderPath, bodySettingsResultCompressionLevel, bodySettingsResultCompressionType, bodySettingsJobLifecycleApplicableJobStatusses, bodySettingsJobLifecycleAction, bodySettingsJobLifecycleType, bodySettingsOcrMode, bodySettingsQualityFactor, bodySettingsContainerConversion, bodySettingsEngine, bodySettingsVersion, bodySettingsOwner);

        // TODO: test validations
    }
    
}
