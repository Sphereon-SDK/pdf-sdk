/**
 * PDF
 * <b>The PDF conversion API 'conversion2pdf' converts image, office and PDF files to (searcheable) PDF files.</b>    The flow is generally as follows:  1. First create a job using the /conversion2pdf/jobs POST endpoint. You will get back a job response that contains a job with its associated settings.  2. Upload one or more images/files using the /conversion2pdf/jobs/{jobId}/streams/multipart POST endpoint. You can also add stream locations from the storage API . You will get back the update job response that contains a job with its associated settings. Currently you can only merge spreadsheets with spreadsheet, documents with documents and images/pdfs with images/pdfs  3. Start the job from a PUT request to the /conversion2pdf/jobs/{jobid} endpoint, with the Job and Settings JSON as request body. The conversion to PDF will now start. The OCR setting is only applicable to images, since other files will always be searchable.  4. Check the job status from the /conversion2pdf/jobs/{jobid} GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  5. Retrieve the PDF file using the /conversion2pdf/jobs/{jobid}/streams/result GET endpoint. This will return the PDF file only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 1.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.sphereon.sdk.pdf.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.sphereon.sdk.pdf.model.CSVSettings;
import com.sphereon.sdk.pdf.model.InputSettings;
import com.sphereon.sdk.pdf.model.Lifecycle;
import com.sphereon.sdk.pdf.model.ResultSettings;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * Conversion settings
 */
@ApiModel(description = "Conversion settings")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-10-23T06:15:58.193+01:00")
public class ConversionSettings   {
  @SerializedName("qualityFactor")
  private Integer qualityFactor = null;

  @SerializedName("result")
  private ResultSettings result = null;

  @SerializedName("input")
  private InputSettings input = null;

  /**
   * Gets or Sets engine
   */
  public enum EngineEnum {
    @SerializedName("BASIC")
    BASIC("BASIC"),
    
    @SerializedName("ADVANCED")
    ADVANCED("ADVANCED"),
    
    @SerializedName("PREMIUM")
    PREMIUM("PREMIUM");

    private String value;

    EngineEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("engine")
  private EngineEnum engine = null;

  @SerializedName("csv")
  private CSVSettings csv = null;

  /**
   * Gets or Sets containerConversion
   */
  public enum ContainerConversionEnum {
    @SerializedName("ALL")
    ALL("ALL"),
    
    @SerializedName("MAIN")
    MAIN("MAIN"),
    
    @SerializedName("SUB")
    SUB("SUB");

    private String value;

    ContainerConversionEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("containerConversion")
  private ContainerConversionEnum containerConversion = null;

  /**
   * The PDF version to use for conversion
   */
  public enum VersionEnum {
    @SerializedName("PDF_1_4")
    _1_4("PDF_1_4"),
    
    @SerializedName("PDF_1_5")
    _1_5("PDF_1_5"),
    
    @SerializedName("PDF_1_6")
    _1_6("PDF_1_6"),
    
    @SerializedName("PDF_1_7")
    _1_7("PDF_1_7"),
    
    @SerializedName("PDF_A_1b")
    A_1B("PDF_A_1b");

    private String value;

    VersionEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("version")
  private VersionEnum version = null;

  @SerializedName("jobLifecycle")
  private Lifecycle jobLifecycle = null;

  /**
   * Gets or Sets ocrMode
   */
  public enum OcrModeEnum {
    @SerializedName("ALWAYS")
    ALWAYS("ALWAYS"),
    
    @SerializedName("NEVER")
    NEVER("NEVER"),
    
    @SerializedName("AUTO")
    AUTO("AUTO");

    private String value;

    OcrModeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("ocrMode")
  private OcrModeEnum ocrMode = null;

  public ConversionSettings qualityFactor(Integer qualityFactor) {
    this.qualityFactor = qualityFactor;
    return this;
  }

   /**
   * Set the quality factor for the resulting PDF. Range from 0 (lowest) to 10 (highest)
   * minimum: 0.0
   * maximum: 10.0
   * @return qualityFactor
  **/
  @ApiModelProperty(example = "null", value = "Set the quality factor for the resulting PDF. Range from 0 (lowest) to 10 (highest)")
  public Integer getQualityFactor() {
    return qualityFactor;
  }

  public void setQualityFactor(Integer qualityFactor) {
    this.qualityFactor = qualityFactor;
  }

  public ConversionSettings result(ResultSettings result) {
    this.result = result;
    return this;
  }

   /**
   * Get result
   * @return result
  **/
  @ApiModelProperty(example = "null", value = "")
  public ResultSettings getResult() {
    return result;
  }

  public void setResult(ResultSettings result) {
    this.result = result;
  }

  public ConversionSettings input(InputSettings input) {
    this.input = input;
    return this;
  }

   /**
   * Get input
   * @return input
  **/
  @ApiModelProperty(example = "null", value = "")
  public InputSettings getInput() {
    return input;
  }

  public void setInput(InputSettings input) {
    this.input = input;
  }

  public ConversionSettings engine(EngineEnum engine) {
    this.engine = engine;
    return this;
  }

   /**
   * Get engine
   * @return engine
  **/
  @ApiModelProperty(example = "null", value = "")
  public EngineEnum getEngine() {
    return engine;
  }

  public void setEngine(EngineEnum engine) {
    this.engine = engine;
  }

  public ConversionSettings csv(CSVSettings csv) {
    this.csv = csv;
    return this;
  }

   /**
   * Get csv
   * @return csv
  **/
  @ApiModelProperty(example = "null", value = "")
  public CSVSettings getCsv() {
    return csv;
  }

  public void setCsv(CSVSettings csv) {
    this.csv = csv;
  }

  public ConversionSettings containerConversion(ContainerConversionEnum containerConversion) {
    this.containerConversion = containerConversion;
    return this;
  }

   /**
   * Get containerConversion
   * @return containerConversion
  **/
  @ApiModelProperty(example = "null", value = "")
  public ContainerConversionEnum getContainerConversion() {
    return containerConversion;
  }

  public void setContainerConversion(ContainerConversionEnum containerConversion) {
    this.containerConversion = containerConversion;
  }

  public ConversionSettings version(VersionEnum version) {
    this.version = version;
    return this;
  }

   /**
   * The PDF version to use for conversion
   * @return version
  **/
  @ApiModelProperty(example = "null", value = "The PDF version to use for conversion")
  public VersionEnum getVersion() {
    return version;
  }

  public void setVersion(VersionEnum version) {
    this.version = version;
  }

  public ConversionSettings jobLifecycle(Lifecycle jobLifecycle) {
    this.jobLifecycle = jobLifecycle;
    return this;
  }

   /**
   * The lifecycle of the job itself
   * @return jobLifecycle
  **/
  @ApiModelProperty(example = "null", value = "The lifecycle of the job itself")
  public Lifecycle getJobLifecycle() {
    return jobLifecycle;
  }

  public void setJobLifecycle(Lifecycle jobLifecycle) {
    this.jobLifecycle = jobLifecycle;
  }

  public ConversionSettings ocrMode(OcrModeEnum ocrMode) {
    this.ocrMode = ocrMode;
    return this;
  }

   /**
   * Get ocrMode
   * @return ocrMode
  **/
  @ApiModelProperty(example = "null", value = "")
  public OcrModeEnum getOcrMode() {
    return ocrMode;
  }

  public void setOcrMode(OcrModeEnum ocrMode) {
    this.ocrMode = ocrMode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversionSettings conversionSettings = (ConversionSettings) o;
    return Objects.equals(this.qualityFactor, conversionSettings.qualityFactor) &&
        Objects.equals(this.result, conversionSettings.result) &&
        Objects.equals(this.input, conversionSettings.input) &&
        Objects.equals(this.engine, conversionSettings.engine) &&
        Objects.equals(this.csv, conversionSettings.csv) &&
        Objects.equals(this.containerConversion, conversionSettings.containerConversion) &&
        Objects.equals(this.version, conversionSettings.version) &&
        Objects.equals(this.jobLifecycle, conversionSettings.jobLifecycle) &&
        Objects.equals(this.ocrMode, conversionSettings.ocrMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(qualityFactor, result, input, engine, csv, containerConversion, version, jobLifecycle, ocrMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversionSettings {\n");
    
    sb.append("    qualityFactor: ").append(toIndentedString(qualityFactor)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    csv: ").append(toIndentedString(csv)).append("\n");
    sb.append("    containerConversion: ").append(toIndentedString(containerConversion)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    jobLifecycle: ").append(toIndentedString(jobLifecycle)).append("\n");
    sb.append("    ocrMode: ").append(toIndentedString(ocrMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

