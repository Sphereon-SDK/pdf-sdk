/**
 * PDF
 * <b>The PDF conversion API 'conversion2pdf' converts image, office and PDF files to (searcheable) PDF files.</b>    The flow is generally as follows:  1. First create a job using the /conversion2pdf/jobs POST endpoint. You will get back a job response that contains a job with its associated settings.  2. Upload one or more images/files using the /conversion2pdf/jobs/{jobId}/streams/multipart POST endpoint. You can also add stream locations from the storage API . You will get back the update job response that contains a job with its associated settings. Currently you can only merge spreadsheets with spreadsheet, documents with documents and images/pdfs with images/pdfs  3. Start the job from a PUT request to the /conversion2pdf/jobs/{jobid} endpoint, with the Job and Settings JSON as request body. The conversion to PDF will now start. The OCR setting is only applicable to images, since other files will always be searchable.  4. Check the job status from the /conversion2pdf/jobs/{jobid} GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  5. Retrieve the PDF file using the /conversion2pdf/jobs/{jobid}/streams/result GET endpoint. This will return the PDF file only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 * <p>
 * OpenAPI spec version: 1.1
 * Contact: dev@sphereon.com
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.sphereon.sdk.pdf.api;

import com.sphereon.sdk.pdf.handler.ApiException;
import com.sphereon.sdk.pdf.model.*;
import org.junit.Assert;
import org.junit.Before;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.List;

/**
 * API tests for ConversionPDFApi
 */
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ConversionPDFApiTest {


    private final ConversionPDFApi api = new ConversionPDFApi();
    private static ConversionJob conversionJob;
    private static final String IMAGE_NAME = "image.png";// "test.tif";
    private static final URL IMAGE_URL = ConversionPDFApiTest.class.getResource("/" + IMAGE_NAME);
    private static final String ACCESS_TOKEN = "0dbd17f1-c108-350e-807e-42d13e543b32";


    @Before
    public void init() {
        api.getApiClient().setAccessToken(ACCESS_TOKEN);
    }

    /**
     * Create a PDF conversion job
     *
     * Create a PDF conversion job using optional settings supplied, otherwise defaults will be used
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void _01createJobTest() throws ApiException {
        ConversionSettings settings = new ConversionSettings();
        settings.setResult(new ResultSettings());
        settings.getResult().compression(new Compression());
        settings.setJobLifecycle(new Lifecycle());
        settings.getJobLifecycle().setType(Lifecycle.TypeEnum.RETRIEVAL);
        settings.engine(ConversionSettings.EngineEnum.ADVANCED);
        settings.getResult().getCompression().setType(Compression.TypeEnum.ADVANCED);

        ConversionJobResponse response = api.createJob(settings);
        Assert.assertNotNull(response);
        Assert.assertNotNull(response.getJobId());
        Assert.assertNotNull(response.getJob());
        Assert.assertEquals(ConversionJobResponse.StatusEnum.INIT, response.getStatus());
        conversionJob = response.getJob();
    }


    /**
     * Upload a file
     *
     * Upload an image, office or pdf for conversion to PDF. Please note that you can upload multiple files. Conversion will not be started yet.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void _02UploadInputFile() throws ApiException {
        File stream = new File(IMAGE_URL.getFile());
        ConversionJobResponse response = api.addInputFile(conversionJob.getJobId(), stream);
        Assert.assertNotNull(response);
        Assert.assertEquals(conversionJob.getJobId(), response.getJobId());
        Assert.assertNotNull(response.getJob());
        Assert.assertEquals(ConversionJobResponse.StatusEnum.INPUTS_UPLOADED, response.getStatus());
        conversionJob = response.getJob();
    }

    /**
     * Submit PDF job for processing
     * <p>
     * Convert the previously uploaded image(s) to PDF, using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status IMAGE_UPLOADED or resubmit an existing Job with status ERROR. In all cases the job Id in the path must match the jobId in the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void _03submitJob() throws ApiException {
        // Change the default deletion after first retrieval to manual deletion for the manual deletion test
        ConversionJobResponse response = api.submitJob(conversionJob.getJobId(), conversionJob);
        Assert.assertNotNull(response);
        Assert.assertNotNull(response.getJob());
        Assert.assertEquals(ConversionJobResponse.StatusEnum.PROCESSING, response.getStatus());
    }

    /**
     * Job definition and state
     * <p>
     * Get the PDF job definition and current state. Please not that you can differentiate based on http response status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void _04getJob() throws ApiException {
        ConversionJobResponse response = api.getJob(conversionJob.getJobId());
        Assert.assertNotNull(response);
        Assert.assertTrue(response.getStatus() == ConversionJobResponse.StatusEnum.PROCESSING || response.getStatus() == ConversionJobResponse.StatusEnum.DONE);
    }

    /**
     * Get the current result stream
     * <p>
     * Get the PDF as binary stream/file.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.&lt;br/&gt;This means we use a seperate path postfix with the value &#39;/stream&#39;.  This API only returns the PDF when the response status code is zero! In other cases nothing is returned or the Job JSON when it is still being executed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void _05getPDF() throws ApiException, InterruptedException, IOException {
        ConversionJobResponse response = null;
        int count = 0;
        do {
            Thread.sleep(500);
            count++;
            response = api.getJob(conversionJob.getJobId());
        }
        while (count < 100 && response.getStatus() != ConversionJobResponse.StatusEnum.DONE && response.getStatus() != ConversionJobResponse.StatusEnum.ERROR);
        byte[] pdfOutput = api.getStream(conversionJob.getJobId());
        Assert.assertNotNull(pdfOutput);
        String result = new String(pdfOutput);
        Assert.assertTrue("Invalid result received: " + result, result.startsWith("%PDF-1"));
        Assert.assertTrue(result.contains("EOF"));
        // We could write the output to file of course
        // Files.write(new File("/tmp/out.pdf").toPath(), pdfOutput);
    }

    /**
     * Delete a job manually
     * <p>
     * Delete the PDF job and all related files
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void _06deleteJob() throws ApiException {
        try {
            ConversionJobResponse response = api.deleteJob(conversionJob.getJobId());
            Assert.fail("Delete on retrieval lifecycle was specified for the job, so the job should be already gone directly after the getPDF step");
        } catch (ApiException ae) {
            // see fail message above
            Assert.assertEquals(404, ae.getCode());
            Assert.assertTrue(ae.getResponseBody().contains("not be found"));
        }
      }


    /**
     * Add Input Stream Location(s)
     *
     * Add image, office or pdf input stream location(s) from the storage API for conversion to PDF. Please note that you can upload multiple files. Conversion will not be started yet.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInputStreamLocationsTest() throws ApiException {
        String jobid = null;
        List<StreamLocation> inputStreamLocations = null;
        // ConversionJobResponse response = api.addInputStreamLocations(jobid, inputStreamLocations);

        // TODO: test validations
    }

}
