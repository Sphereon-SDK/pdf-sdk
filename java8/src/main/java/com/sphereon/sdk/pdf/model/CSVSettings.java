/**
 * PDF 
 * <b>The PDF conversion API 'conversion2pdf' converts image, office and PDF files to (searcheable) PDF files.</b>    The flow is generally as follows:  1. First upload an image/file using the /conversion2pdf POST endpoint. You will get back a job response that contains a job with its associated settings.  2. Upload any additional images/files using the /conversion2pdf/{jobId} POST endpoint when you want to merge additional image, office or PDF files. You will get back the update job response that contains a job with its associated settings. Currently you can only merge spreadsheets with spreadsheet, documents with documents and images/pdfs with images/pdfs  3. Start the job from a PUT request to the /conversion2pdf/{jobid} endpoint, with the Job and Settings JSON as request body. The conversion to PDF will now start. The OCR setting is only applicable to images, since other files will always be searchable.  4. Check the job status from the /conversion2pdf/{jobid} GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  5. Retrieve the PDF file using the /conversion2pdf/{jobid}/stream GET endpoint. This will return the PDF file only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.sphereon.sdk.pdf.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * CSVSettings
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-08-14T16:34:03.653+02:00")
public class CSVSettings   {
  /**
   * Set the separator for the columns. Choose between a comma (,), semicolon(;) and tab( )
   */
  public enum SeparatorCharacterEnum {
    @SerializedName("COMMA")
    COMMA("COMMA"),
    
    @SerializedName("SEMICOLON")
    SEMICOLON("SEMICOLON"),
    
    @SerializedName("TAB")
    TAB("TAB");

    private String value;

    SeparatorCharacterEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("separatorCharacter")
  private SeparatorCharacterEnum separatorCharacter = null;

  @SerializedName("standardRowHeight")
  private Double standardRowHeight = null;

  @SerializedName("standardColumnWidth")
  private Double standardColumnWidth = null;

  public CSVSettings separatorCharacter(SeparatorCharacterEnum separatorCharacter) {
    this.separatorCharacter = separatorCharacter;
    return this;
  }

   /**
   * Set the separator for the columns. Choose between a comma (,), semicolon(;) and tab( )
   * @return separatorCharacter
  **/
  @ApiModelProperty(example = "null", value = "Set the separator for the columns. Choose between a comma (,), semicolon(;) and tab( )")
  public SeparatorCharacterEnum getSeparatorCharacter() {
    return separatorCharacter;
  }

  public void setSeparatorCharacter(SeparatorCharacterEnum separatorCharacter) {
    this.separatorCharacter = separatorCharacter;
  }

  public CSVSettings standardRowHeight(Double standardRowHeight) {
    this.standardRowHeight = standardRowHeight;
    return this;
  }

   /**
   * Set the standard row Height. Range from 1 (lowest) to 409 (highest)
   * minimum: 1.0
   * maximum: 409.0
   * @return standardRowHeight
  **/
  @ApiModelProperty(example = "null", value = "Set the standard row Height. Range from 1 (lowest) to 409 (highest)")
  public Double getStandardRowHeight() {
    return standardRowHeight;
  }

  public void setStandardRowHeight(Double standardRowHeight) {
    this.standardRowHeight = standardRowHeight;
  }

  public CSVSettings standardColumnWidth(Double standardColumnWidth) {
    this.standardColumnWidth = standardColumnWidth;
    return this;
  }

   /**
   * Set the quality factor for the resulting PDF. Range from 1 (lowest) to 255 (highest)
   * minimum: 1.0
   * maximum: 255.0
   * @return standardColumnWidth
  **/
  @ApiModelProperty(example = "null", value = "Set the quality factor for the resulting PDF. Range from 1 (lowest) to 255 (highest)")
  public Double getStandardColumnWidth() {
    return standardColumnWidth;
  }

  public void setStandardColumnWidth(Double standardColumnWidth) {
    this.standardColumnWidth = standardColumnWidth;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CSVSettings cSVSettings = (CSVSettings) o;
    return Objects.equals(this.separatorCharacter, cSVSettings.separatorCharacter) &&
        Objects.equals(this.standardRowHeight, cSVSettings.standardRowHeight) &&
        Objects.equals(this.standardColumnWidth, cSVSettings.standardColumnWidth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(separatorCharacter, standardRowHeight, standardColumnWidth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CSVSettings {\n");
    
    sb.append("    separatorCharacter: ").append(toIndentedString(separatorCharacter)).append("\n");
    sb.append("    standardRowHeight: ").append(toIndentedString(standardRowHeight)).append("\n");
    sb.append("    standardColumnWidth: ").append(toIndentedString(standardColumnWidth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

