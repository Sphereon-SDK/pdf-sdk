/**
 * Sphereon :: DOC :: PDF
 * <b>The PDF conversion API 'image2pdf' converts images to (searcheable) PDF files.</b>    The flow is generally as follows:  1. First upload an image using the /image2pdf POST endpoint. You will get back a job response that contains a job with its associated settings.  2. Upload any additional images using the /image2pdf/{jobId} POST endpoint when you want to merge additional images or PDFs. You will get back the update job response that contains a job with its associated settings.  3. Start the job from a PUT request to the /image2pdf/{jobid} endpoint, with the Job and Settings JSON as request body. The conversion to PDF will now start  4. Check the job status from the /image2pdf/{jobid} GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  5. Retrieve the PDF file using the /image2pdf/{jobid}/stream GET endpoint. This will return the PDF file only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.5
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.sphereon.sdk.pdf.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.sphereon.sdk.pdf.model.Link;
import com.sphereon.sdk.pdf.model.OcrEngineTask;
import com.sphereon.sdk.pdf.model.PDFJob;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * The PDF job. Has access to the job settings as well as ocr engine tasks
 */
@ApiModel(description = "The PDF job. Has access to the job settings as well as ocr engine tasks")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-11-01T18:16:14.907+01:00")
public class PDFJobResponse   {
  @SerializedName("_links")
  private Map<String, Link> links = new HashMap<String, Link>();

  @SerializedName("completionTime")
  private OffsetDateTime completionTime = null;

  @SerializedName("creationTime")
  private OffsetDateTime creationTime = null;

  @SerializedName("images")
  private List<String> images = new ArrayList<String>();

  @SerializedName("job")
  private PDFJob job = null;

  @SerializedName("jobId")
  private String jobId = null;

  @SerializedName("queueTime")
  private OffsetDateTime queueTime = null;

  /**
   * The status of the job
   */
  public enum StatusEnum {
    @SerializedName("IMAGE_UPLOADED")
    IMAGE_UPLOADED("IMAGE_UPLOADED"),
    
    @SerializedName("PROCESSING")
    PROCESSING("PROCESSING"),
    
    @SerializedName("DONE")
    DONE("DONE"),
    
    @SerializedName("ERROR")
    ERROR("ERROR"),
    
    @SerializedName("DELETED")
    DELETED("DELETED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("statusMessage")
  private String statusMessage = null;

  @SerializedName("tasks")
  private List<OcrEngineTask> tasks = new ArrayList<OcrEngineTask>();

  @SerializedName("updateTime")
  private OffsetDateTime updateTime = null;

  public PDFJobResponse links(Map<String, Link> links) {
    this.links = links;
    return this;
  }

  public PDFJobResponse putLinksItem(String key, Link linksItem) {
    this.links.put(key, linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @ApiModelProperty(example = "null", value = "")
  public Map<String, Link> getLinks() {
    return links;
  }

  public void setLinks(Map<String, Link> links) {
    this.links = links;
  }

   /**
   * The completion date/time of this job in ISO 8601 format
   * @return completionTime
  **/
  @ApiModelProperty(example = "null", value = "The completion date/time of this job in ISO 8601 format")
  public OffsetDateTime getCompletionTime() {
    return completionTime;
  }

   /**
   * The creation date/time of this job in ISO 8601 format
   * @return creationTime
  **/
  @ApiModelProperty(example = "null", value = "The creation date/time of this job in ISO 8601 format")
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public PDFJobResponse images(List<String> images) {
    this.images = images;
    return this;
  }

  public PDFJobResponse addImagesItem(String imagesItem) {
    this.images.add(imagesItem);
    return this;
  }

   /**
   * The original images. Currently only a single image is supported. The image can be a multipage tiff however
   * @return images
  **/
  @ApiModelProperty(example = "null", required = true, value = "The original images. Currently only a single image is supported. The image can be a multipage tiff however")
  public List<String> getImages() {
    return images;
  }

  public void setImages(List<String> images) {
    this.images = images;
  }

  public PDFJobResponse job(PDFJob job) {
    this.job = job;
    return this;
  }

   /**
   * Get job
   * @return job
  **/
  @ApiModelProperty(example = "null", value = "")
  public PDFJob getJob() {
    return job;
  }

  public void setJob(PDFJob job) {
    this.job = job;
  }

  public PDFJobResponse jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

   /**
   * Get jobId
   * @return jobId
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }

   /**
   * The conversion queue date/time of this job in ISO 8601 format
   * @return queueTime
  **/
  @ApiModelProperty(example = "null", value = "The conversion queue date/time of this job in ISO 8601 format")
  public OffsetDateTime getQueueTime() {
    return queueTime;
  }

   /**
   * The status of the job
   * @return status
  **/
  @ApiModelProperty(example = "null", required = true, value = "The status of the job")
  public StatusEnum getStatus() {
    return status;
  }

   /**
   * A status message, which can be informational, warning or error. AA message here does not indicate an error perse
   * @return statusMessage
  **/
  @ApiModelProperty(example = "null", value = "A status message, which can be informational, warning or error. AA message here does not indicate an error perse")
  public String getStatusMessage() {
    return statusMessage;
  }

  public PDFJobResponse tasks(List<OcrEngineTask> tasks) {
    this.tasks = tasks;
    return this;
  }

  public PDFJobResponse addTasksItem(OcrEngineTask tasksItem) {
    this.tasks.add(tasksItem);
    return this;
  }

   /**
   * The server supplied engine task(s)
   * @return tasks
  **/
  @ApiModelProperty(example = "null", value = "The server supplied engine task(s)")
  public List<OcrEngineTask> getTasks() {
    return tasks;
  }

  public void setTasks(List<OcrEngineTask> tasks) {
    this.tasks = tasks;
  }

   /**
   * The last update date/time of this job in ISO 8601 format
   * @return updateTime
  **/
  @ApiModelProperty(example = "null", value = "The last update date/time of this job in ISO 8601 format")
  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PDFJobResponse pDFJobResponse = (PDFJobResponse) o;
    return Objects.equals(this.links, pDFJobResponse.links) &&
        Objects.equals(this.completionTime, pDFJobResponse.completionTime) &&
        Objects.equals(this.creationTime, pDFJobResponse.creationTime) &&
        Objects.equals(this.images, pDFJobResponse.images) &&
        Objects.equals(this.job, pDFJobResponse.job) &&
        Objects.equals(this.jobId, pDFJobResponse.jobId) &&
        Objects.equals(this.queueTime, pDFJobResponse.queueTime) &&
        Objects.equals(this.status, pDFJobResponse.status) &&
        Objects.equals(this.statusMessage, pDFJobResponse.statusMessage) &&
        Objects.equals(this.tasks, pDFJobResponse.tasks) &&
        Objects.equals(this.updateTime, pDFJobResponse.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, completionTime, creationTime, images, job, jobId, queueTime, status, statusMessage, tasks, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PDFJobResponse {\n");
    
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    completionTime: ").append(toIndentedString(completionTime)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    job: ").append(toIndentedString(job)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    queueTime: ").append(toIndentedString(queueTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

