/**
 * Converstion 2 PDF
 * <b>The PDF conversion API 'conversion2pdf' converts image, office and PDF files to (searcheable) PDF files.</b>    The flow is generally as follows:  1. First upload an image/file using the /conversion2pdf POST endpoint. You will get back a job response that contains a job with its associated settings.  2. Upload any additional images/files using the /conversion2pdf/{jobId} POST endpoint when you want to merge additional image, office or PDF files. You will get back the update job response that contains a job with its associated settings. Currently you can only merge spreadsheets with spreadsheet, documents with documents and images/pdfs with images/pdfs  3. Start the job from a PUT request to the /conversion2pdf/{jobid} endpoint, with the Job and Settings JSON as request body. The conversion to PDF will now start. The OCR setting is only applicable to images, since other files will always be searchable.  4. Check the job status from the /conversion2pdf/{jobid} GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  5. Retrieve the PDF file using the /conversion2pdf/{jobid}/stream GET endpoint. This will return the PDF file only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.3.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.sphereon.sdk.pdf.api;

import com.sphereon.sdk.pdf.handler.ApiException;
import com.sphereon.sdk.pdf.model.PDFJobResponse;
import com.sphereon.sdk.pdf.model.ErrorResponse;
import com.sphereon.sdk.pdf.model.PDFJob;
import java.io.File;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConversionPDFApi
 */
public class ConversionPDFApiTest {

    private final ConversionPDFApi api = new ConversionPDFApi();

    
    /**
     * Delete a job manually
     *
     * Delete the PDF job and all related files
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJobTest() throws ApiException {
        String jobid = null;
        // PDFJobResponse response = api.deleteJob(jobid);

        // TODO: test validations
    }
    
    /**
     * Job definition and state
     *
     * Get the PDF job definition and current state. Please not that you can differentiate based on http response status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobTest() throws ApiException {
        String jobid = null;
        // PDFJobResponse response = api.getJob(jobid);

        // TODO: test validations
    }
    
    /**
     * Get all jobs
     *
     * Get all PDF job definitions and their current state.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobsTest() throws ApiException {
        List<String> status = null;
        // PDFJobResponse response = api.getJobs(status);

        // TODO: test validations
    }
    
    /**
     * Get the current result stream
     *
     * Get the PDF as binary stream/file.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.&lt;br/&gt;This means we use a seperate path postfix with the value &#39;/stream&#39;.  This API only returns the PDF when the response status code is zero! In other cases nothing is returned or the Job JSON when it is still being executed
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStreamTest() throws ApiException {
        String jobid = null;
        // byte[] response = api.getStream(jobid);

        // TODO: test validations
    }
    
    /**
     * Submit PDF job for processing
     *
     * Convert the previously uploaded file(s) to PDF, using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the job Id in the path must match the jobId in the request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitJobTest() throws ApiException {
        String jobid = null;
        PDFJob job = null;
        // PDFJobResponse response = api.submitJob(jobid, job);

        // TODO: test validations
    }
    
    /**
     * Upload an additional file
     *
     * Upload an additional image, office or pdf for conversion to PDF. Conversion will not be started yet.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadAdditionalFileTest() throws ApiException {
        String jobid = null;
        File stream = null;
        // PDFJobResponse response = api.uploadAdditionalFile(jobid, stream);

        // TODO: test validations
    }
    
    /**
     * Upload first file
     *
     * Upload the first image, office or pdf file.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFileTest() throws ApiException {
        File stream = null;
        // PDFJobResponse response = api.uploadFile(stream);

        // TODO: test validations
    }
    
}
