/**
 * Sphereon :: DOC :: PDF
 * <b>The PDF conversion API 'image2pdf' converts images to (searcheable) PDF files.</b>    The flow is generally as follows:  1. First upload an image using the <i>/image2pdf<i> POST endpoint. You will get back a response that contains a job with its associated settings.  2. Start the job from a PUT request to the <i>/image2pdf/[jobid]</i> endpoint, with the Job and Settings JSON as request body. The conversion to PDF will now start  3. Check the job status from the /image2pdf/[jobid] GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  4. Retrieve the PDF file using the /image2pdf/[jobid]/stream GET endpoint. This will return the PDF file only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      <b>Interactive testing</b>A web based test console is available at: <a href=\"/test.html\">This page</a>
 * <p>
 * OpenAPI spec version: 0.1.4
 * Contact: dev@sphereon.com
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.sphereon.sdk.pdf.api;

import com.sphereon.sdk.pdf.handler.ApiException;
import com.sphereon.sdk.pdf.handler.auth.OAuth;
import com.sphereon.sdk.pdf.model.Lifecycle;
import com.sphereon.sdk.pdf.model.PDFJobResponse;
import com.sphereon.sdk.pdf.model.VndErrors;
import com.sphereon.sdk.pdf.model.PDFJob;

import java.io.File;

import org.junit.Assert;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import java.net.URL;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ImagePDFApi
 */
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ImagePDFApiTest {

    private final ImagePDFApi api = new ImagePDFApi();
    private static PDFJob pdfJob;
    private static final String IMAGE_NAME = "image.png";
    private static final URL IMAGE_URL = ImagePDFApiTest.class.getResource("/" + IMAGE_NAME);
    private static final String ACCESS_TOKEN = "ac5c0469-aec5-31ca-8cf7-7cb508c8d4ab";


    /**
     * Upload (first) image
     * <p>
     * Upload an image for conversion to PDF. Conversion will not be started yet. In order to create a multipage PDF you can submit a multipage Tiff
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void _01UploadImageUsingPOSTTest() throws ApiException {
//        api.getApiClient().setBasePath("https://gw.api.cloud.sphereon.com/pdf/0.1.4");
        api.getApiClient().setAccessToken(ACCESS_TOKEN);
        File stream = new File(IMAGE_URL.getFile());
        PDFJobResponse response = api.uploadImage(stream);
        Assert.assertNotNull(response);
        Assert.assertNotNull(response.getJobId());
        Assert.assertNotNull(response.getJob());
        Assert.assertEquals(PDFJobResponse.StatusEnum.IMAGE_UPLOADED, response.getStatus());
        pdfJob = response.getJob();
    }

    /**
     * Submit PDF job for processing
     * <p>
     * Convert the previously uploaded image(s) to PDF, using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status IMAGE_UPLOADED or resubmit an existing Job with status ERROR. In all cases the job Id in the path must match the jobId in the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void _02submitJob() throws ApiException {
        // Change the default deletion after first retrieval to manual deletion for the manual deletion test
        pdfJob.getSettings().getLifecycle().setType(Lifecycle.TypeEnum.TIME);
        PDFJobResponse response = api.submitJob(pdfJob.getJobId(), pdfJob);
        Assert.assertNotNull(response);
        Assert.assertNotNull(response.getJob());
        Assert.assertEquals(PDFJobResponse.StatusEnum.PROCESSING, response.getStatus());
    }


    /**
     * Job definition and state
     * <p>
     * Get the PDF job definition and current state. Please not that you can differentiate based on http response status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void _03getJob() throws ApiException {
        PDFJobResponse response = api.getJob(pdfJob.getJobId());
        Assert.assertNotNull(response);
        Assert.assertTrue(response.getStatus() == PDFJobResponse.StatusEnum.PROCESSING || response.getStatus() == PDFJobResponse.StatusEnum.DONE);
    }


    /**
     * Get the current result stream
     * <p>
     * Get the PDF as binary stream/file.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.&lt;br/&gt;This means we use a seperate path postfix with the value &#39;/stream&#39;.  This API only returns the PDF when the response status code is zero! In other cases nothing is returned or the Job JSON when it is still being executed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void _04getPDF() throws ApiException, InterruptedException {
        PDFJobResponse response = null;
        int count = 0;
        do {
            count++;
            response = api.getJob(pdfJob.getJobId());
            Thread.sleep(200);
        } while (count < 100 && response.getStatus() == PDFJobResponse.StatusEnum.PROCESSING);
        byte[] pdfOutput = api.getStream(pdfJob.getJobId());
        Assert.assertNotNull(pdfOutput);
        String result = new String(pdfOutput);
        Assert.assertTrue(result.startsWith("%PDF-1"));
        Assert.assertTrue(result.contains("EOF"));
        // We could write the output to file of course
    }


    /**
     * Delete a job manually
     * <p>
     * Delete the PDF job and all related files
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void _05deleteJob() throws ApiException {
        PDFJobResponse response = api.deleteJob(pdfJob.getJobId());
        Assert.assertNotNull(response);
        Assert.assertNotNull(response.getJob());
        Assert.assertEquals(PDFJobResponse.StatusEnum.DELETED, response.getStatus());
    }


}
