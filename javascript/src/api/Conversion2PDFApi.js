/**
 * PDF
 * The PDF conversion API 'conversion2pdf' converts image, office and PDF files to (searcheable) PDF files.    The flow is generally as follows:  1. First create a job using the /conversion2pdf/jobs POST endpoint. You will get back a job response that contains a job with its associated settings.  2. Upload one or more images/files using the /conversion2pdf/jobs/{jobId}/streams/multipart POST endpoint. You can also add stream locations from the storage API . You will get back the update job response that contains a job with its associated settings. Currently you can only merge spreadsheets with spreadsheet, documents with documents and images/pdfs with images/pdfs  3. Start the job from a PUT request to the /conversion2pdf/jobs/{jobid} endpoint, with the Job and Settings JSON as request body. The conversion to PDF will now start. The OCR setting is only applicable to images, since other files will always be searchable.  4. Check the job status from the /conversion2pdf/jobs/{jobid} GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  5. Retrieve the PDF file using the /conversion2pdf/jobs/{jobid}/streams/result GET endpoint. This will return the PDF file only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      Interactive testing: A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 1.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ConversionJob', 'model/ConversionJobResponse', 'model/ConversionSettings', 'model/ErrorResponse', 'model/StreamLocation'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ConversionJob'), require('../model/ConversionJobResponse'), require('../model/ConversionSettings'), require('../model/ErrorResponse'), require('../model/StreamLocation'));
  } else {
    // Browser globals (root is window)
    if (!root.Pdf) {
      root.Pdf = {};
    }
    root.Pdf.Conversion2PDFApi = factory(root.Pdf.ApiClient, root.Pdf.ConversionJob, root.Pdf.ConversionJobResponse, root.Pdf.ConversionSettings, root.Pdf.ErrorResponse, root.Pdf.StreamLocation);
  }
}(this, function(ApiClient, ConversionJob, ConversionJobResponse, ConversionSettings, ErrorResponse, StreamLocation) {
  'use strict';

  /**
   * Conversion2PDF service.
   * @module api/Conversion2PDFApi
   * @version 1.1
   */

  /**
   * Constructs a new Conversion2PDFApi. 
   * @alias module:api/Conversion2PDFApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addInputFile operation.
     * @callback module:api/Conversion2PDFApi~addInputFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversionJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a file
     * Upload an image, office or pdf for conversion to PDF. Please note that you can upload multiple files. Conversion will not be started yet.
     * @param {String} jobid jobid
     * @param {File} stream The (additional) binary image or PDF (file/inputstream) to convert to PDF
     * @param {Object} opts Optional parameters
     * @param {String} opts.fileName Optional input file name.
     * @param {module:api/Conversion2PDFApi~addInputFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversionJobResponse}
     */
    this.addInputFile = function(jobid, stream, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'jobid' is set
      if (jobid === undefined || jobid === null) {
        throw new Error("Missing the required parameter 'jobid' when calling addInputFile");
      }

      // verify the required parameter 'stream' is set
      if (stream === undefined || stream === null) {
        throw new Error("Missing the required parameter 'stream' when calling addInputFile");
      }


      var pathParams = {
        'jobid': jobid
      };
      var queryParams = {
        'fileName': opts['fileName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'stream': stream
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ConversionJobResponse;

      return this.apiClient.callApi(
        '/conversion2pdf/jobs/{jobid}/streams/multipart', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addInputStreamLocations operation.
     * @callback module:api/Conversion2PDFApi~addInputStreamLocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversionJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Input Stream Location(s)
     * Add image, office or pdf input stream location(s) from the storage API for conversion to PDF. Please note that you can upload multiple files. Conversion will not be started yet.
     * @param {String} jobid jobid
     * @param {Array.<module:model/StreamLocation>} inputStreamLocations The (additional) binary image or PDF (file/inputstream) to convert to PDF
     * @param {module:api/Conversion2PDFApi~addInputStreamLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversionJobResponse}
     */
    this.addInputStreamLocations = function(jobid, inputStreamLocations, callback) {
      var postBody = inputStreamLocations;

      // verify the required parameter 'jobid' is set
      if (jobid === undefined || jobid === null) {
        throw new Error("Missing the required parameter 'jobid' when calling addInputStreamLocations");
      }

      // verify the required parameter 'inputStreamLocations' is set
      if (inputStreamLocations === undefined || inputStreamLocations === null) {
        throw new Error("Missing the required parameter 'inputStreamLocations' when calling addInputStreamLocations");
      }


      var pathParams = {
        'jobid': jobid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ConversionJobResponse;

      return this.apiClient.callApi(
        '/conversion2pdf/jobs/{jobid}/streams/location', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createJob operation.
     * @callback module:api/Conversion2PDFApi~createJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversionJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a PDF conversion job
     * Create a PDF conversion job using optional settings supplied, otherwise defaults will be used
     * @param {Object} opts Optional parameters
     * @param {module:model/ConversionSettings} opts.settings Optional settings to use for this job
     * @param {module:api/Conversion2PDFApi~createJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversionJobResponse}
     */
    this.createJob = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['settings'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ConversionJobResponse;

      return this.apiClient.callApi(
        '/conversion2pdf/jobs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJob operation.
     * @callback module:api/Conversion2PDFApi~deleteJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversionJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a job manually
     * Delete the PDF job and all related files.
     * @param {String} jobid jobid
     * @param {module:api/Conversion2PDFApi~deleteJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversionJobResponse}
     */
    this.deleteJob = function(jobid, callback) {
      var postBody = null;

      // verify the required parameter 'jobid' is set
      if (jobid === undefined || jobid === null) {
        throw new Error("Missing the required parameter 'jobid' when calling deleteJob");
      }


      var pathParams = {
        'jobid': jobid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ConversionJobResponse;

      return this.apiClient.callApi(
        '/conversion2pdf/jobs/{jobid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJob operation.
     * @callback module:api/Conversion2PDFApi~getJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversionJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Job definition and state
     * Get the PDF job definition and current state. Please note that you can differentiate based on http response status.
     * @param {String} jobid jobid
     * @param {module:api/Conversion2PDFApi~getJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversionJobResponse}
     */
    this.getJob = function(jobid, callback) {
      var postBody = null;

      // verify the required parameter 'jobid' is set
      if (jobid === undefined || jobid === null) {
        throw new Error("Missing the required parameter 'jobid' when calling getJob");
      }


      var pathParams = {
        'jobid': jobid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ConversionJobResponse;

      return this.apiClient.callApi(
        '/conversion2pdf/jobs/{jobid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobs operation.
     * @callback module:api/Conversion2PDFApi~getJobsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConversionJobResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all jobs
     * Get all PDF job definitions and their current state.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.status A list of status to filter on.
     * @param {module:api/Conversion2PDFApi~getJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConversionJobResponse>}
     */
    this.getJobs = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'status': {
          value: opts['status'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = [ConversionJobResponse];

      return this.apiClient.callApi(
        '/conversion2pdf/jobs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStream operation.
     * @callback module:api/Conversion2PDFApi~getStreamCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current result stream
     * Get the PDF as binary stream/file.  Our API generation does not allow changing the media type based on the Accepted header unfortunately.  This means we use a seperate path postfix with the value &#39;/stream&#39;.  This API only returns the PDF when the response status.
     * @param {String} jobid jobid
     * @param {module:api/Conversion2PDFApi~getStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.getStream = function(jobid, callback) {
      var postBody = null;

      // verify the required parameter 'jobid' is set
      if (jobid === undefined || jobid === null) {
        throw new Error("Missing the required parameter 'jobid' when calling getStream");
      }


      var pathParams = {
        'jobid': jobid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/conversion2pdf/jobs/{jobid}/streams/result', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the submitJob operation.
     * @callback module:api/Conversion2PDFApi~submitJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversionJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit PDF job for processing
     * Start PDF conversion. Convert the previously uploaded file(s) to PDF. The settings supplied with the job in the request body are used for the conversion. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the job Id in the path must match the jobId in the request.
     * @param {String} jobid jobid
     * @param {module:model/ConversionJob} job jobEntity
     * @param {module:api/Conversion2PDFApi~submitJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversionJobResponse}
     */
    this.submitJob = function(jobid, job, callback) {
      var postBody = job;

      // verify the required parameter 'jobid' is set
      if (jobid === undefined || jobid === null) {
        throw new Error("Missing the required parameter 'jobid' when calling submitJob");
      }

      // verify the required parameter 'job' is set
      if (job === undefined || job === null) {
        throw new Error("Missing the required parameter 'job' when calling submitJob");
      }


      var pathParams = {
        'jobid': jobid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ConversionJobResponse;

      return this.apiClient.callApi(
        '/conversion2pdf/jobs/{jobid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
