/**
 * PDF
 * The PDF conversion API 'conversion2pdf' converts image, office and PDF files to (searcheable) PDF files.    The flow is generally as follows:  1. First create a job using the /conversion2pdf/jobs POST endpoint. You will get back a job response that contains a job with its associated settings.  2. Upload one or more images/files using the /conversion2pdf/jobs/{jobId}/streams/multipart POST endpoint. You can also add stream locations from the storage API . You will get back the update job response that contains a job with its associated settings. Currently you can only merge spreadsheets with spreadsheet, documents with documents and images/pdfs with images/pdfs  3. Start the job from a PUT request to the /conversion2pdf/jobs/{jobid} endpoint, with the Job and Settings JSON as request body. The conversion to PDF will now start. The OCR setting is only applicable to images, since other files will always be searchable.  4. Check the job status from the /conversion2pdf/jobs/{jobid} GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  5. Retrieve the PDF file using the /conversion2pdf/jobs/{jobid}/streams/result GET endpoint. This will return the PDF file only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      Interactive testing: A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 1.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CSVSettings', 'model/Compression', 'model/ConversionJob', 'model/ConversionJobResponse', 'model/ConversionSettings', 'model/ConversionTask', 'model/ConversionTaskInput', 'model/Error', 'model/ErrorResponse', 'model/InputResponse', 'model/InputSettings', 'model/Lifecycle', 'model/ResultResponse', 'model/ResultSettings', 'model/StorageLocation', 'model/StreamLocation', 'api/Conversion2PDFApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/CSVSettings'), require('./model/Compression'), require('./model/ConversionJob'), require('./model/ConversionJobResponse'), require('./model/ConversionSettings'), require('./model/ConversionTask'), require('./model/ConversionTaskInput'), require('./model/Error'), require('./model/ErrorResponse'), require('./model/InputResponse'), require('./model/InputSettings'), require('./model/Lifecycle'), require('./model/ResultResponse'), require('./model/ResultSettings'), require('./model/StorageLocation'), require('./model/StreamLocation'), require('./api/Conversion2PDFApi'));
  }
}(function(ApiClient, CSVSettings, Compression, ConversionJob, ConversionJobResponse, ConversionSettings, ConversionTask, ConversionTaskInput, Error, ErrorResponse, InputResponse, InputSettings, Lifecycle, ResultResponse, ResultSettings, StorageLocation, StreamLocation, Conversion2PDFApi) {
  'use strict';

  /**
   * The_PDF_conversion_API_conversion2pdf_converts_image_office_and_PDF_files_to__searcheable_PDF_files_The_flow_is_generally_as_follows1__First_create_a_job_using_the_conversion2pdfjobs_POST_endpoint__You_will_get_back_a_job_response_that_contains_a_job_with_its_associated_settings_2__Upload_one_or_more_imagesfiles_using_the_conversion2pdfjobsjobIdstreamsmultipart_POST_endpoint__You_can_also_add_stream_locations_from_the_storage_API___You_will_get_back_the_update_job_response_that_contains_a_job_with_its_associated_settings__Currently_you_can_only_merge_spreadsheets_with_spreadsheet_documents_with_documents_and_imagespdfs_with_imagespdfs3__Start_the_job_from_a_PUT_request_to_the_conversion2pdfjobsjobid_endpoint_with_the_Job_and_Settings_JSON_as_request_body__The_conversion_to_PDF_will_now_start__The_OCR_setting_is_only_applicable_to_images_since_other_files_will_always_be_searchable_4__Check_the_job_status_from_the_conversion2pdfjobsjobid_GET_endpoint_until_the_status_has_changed_to_DONE_or_ERROR__Messaging_using_a_websocket_will_be_available_as_an_alternative_in_a_future_version5__Retrieve_the_PDF_file_using_the_conversion2pdfjobsjobidstreamsresult_GET_endpoint__This_will_return_the_PDF_file_only_when_the_status_is_DONE__In_other_cases_it_will_return_the_Job_Response_JSON__with_http_code_202_instead_of_200Interactive_testing_A_web_based_test_console_is_available_in_the_a_hrefhttpsstore_sphereon_comSphereon_API_Storea.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var Pdf = require('index'); // See note below*.
   * var xxxSvc = new Pdf.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new Pdf.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new Pdf.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new Pdf.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.1
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The CSVSettings model constructor.
     * @property {module:model/CSVSettings}
     */
    CSVSettings: CSVSettings,
    /**
     * The Compression model constructor.
     * @property {module:model/Compression}
     */
    Compression: Compression,
    /**
     * The ConversionJob model constructor.
     * @property {module:model/ConversionJob}
     */
    ConversionJob: ConversionJob,
    /**
     * The ConversionJobResponse model constructor.
     * @property {module:model/ConversionJobResponse}
     */
    ConversionJobResponse: ConversionJobResponse,
    /**
     * The ConversionSettings model constructor.
     * @property {module:model/ConversionSettings}
     */
    ConversionSettings: ConversionSettings,
    /**
     * The ConversionTask model constructor.
     * @property {module:model/ConversionTask}
     */
    ConversionTask: ConversionTask,
    /**
     * The ConversionTaskInput model constructor.
     * @property {module:model/ConversionTaskInput}
     */
    ConversionTaskInput: ConversionTaskInput,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The ErrorResponse model constructor.
     * @property {module:model/ErrorResponse}
     */
    ErrorResponse: ErrorResponse,
    /**
     * The InputResponse model constructor.
     * @property {module:model/InputResponse}
     */
    InputResponse: InputResponse,
    /**
     * The InputSettings model constructor.
     * @property {module:model/InputSettings}
     */
    InputSettings: InputSettings,
    /**
     * The Lifecycle model constructor.
     * @property {module:model/Lifecycle}
     */
    Lifecycle: Lifecycle,
    /**
     * The ResultResponse model constructor.
     * @property {module:model/ResultResponse}
     */
    ResultResponse: ResultResponse,
    /**
     * The ResultSettings model constructor.
     * @property {module:model/ResultSettings}
     */
    ResultSettings: ResultSettings,
    /**
     * The StorageLocation model constructor.
     * @property {module:model/StorageLocation}
     */
    StorageLocation: StorageLocation,
    /**
     * The StreamLocation model constructor.
     * @property {module:model/StreamLocation}
     */
    StreamLocation: StreamLocation,
    /**
     * The Conversion2PDFApi service constructor.
     * @property {module:api/Conversion2PDFApi}
     */
    Conversion2PDFApi: Conversion2PDFApi
  };

  return exports;
}));
